# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from detect_hog/RobotCamPos.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotCamPos(genpy.Message):
  _md5sum = "b6d1df053b1518d33523e7d629bdecc1"
  _type = "detect_hog/RobotCamPos"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool exist_rob_flag
int32 rob_num
float64[5] rob_cam_pos_x
float64[5] rob_cam_pos_y
float64[5] rob_cam_vel_x
float64[5] rob_cam_vel_y

"""
  __slots__ = ['exist_rob_flag','rob_num','rob_cam_pos_x','rob_cam_pos_y','rob_cam_vel_x','rob_cam_vel_y']
  _slot_types = ['bool','int32','float64[5]','float64[5]','float64[5]','float64[5]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       exist_rob_flag,rob_num,rob_cam_pos_x,rob_cam_pos_y,rob_cam_vel_x,rob_cam_vel_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotCamPos, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.exist_rob_flag is None:
        self.exist_rob_flag = False
      if self.rob_num is None:
        self.rob_num = 0
      if self.rob_cam_pos_x is None:
        self.rob_cam_pos_x = [0.] * 5
      if self.rob_cam_pos_y is None:
        self.rob_cam_pos_y = [0.] * 5
      if self.rob_cam_vel_x is None:
        self.rob_cam_vel_x = [0.] * 5
      if self.rob_cam_vel_y is None:
        self.rob_cam_vel_y = [0.] * 5
    else:
      self.exist_rob_flag = False
      self.rob_num = 0
      self.rob_cam_pos_x = [0.] * 5
      self.rob_cam_pos_y = [0.] * 5
      self.rob_cam_vel_x = [0.] * 5
      self.rob_cam_vel_y = [0.] * 5

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.exist_rob_flag, _x.rob_num))
      buff.write(_get_struct_5d().pack(*self.rob_cam_pos_x))
      buff.write(_get_struct_5d().pack(*self.rob_cam_pos_y))
      buff.write(_get_struct_5d().pack(*self.rob_cam_vel_x))
      buff.write(_get_struct_5d().pack(*self.rob_cam_vel_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.exist_rob_flag, _x.rob_num,) = _get_struct_Bi().unpack(str[start:end])
      self.exist_rob_flag = bool(self.exist_rob_flag)
      start = end
      end += 40
      self.rob_cam_pos_x = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 40
      self.rob_cam_pos_y = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 40
      self.rob_cam_vel_x = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 40
      self.rob_cam_vel_y = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.exist_rob_flag, _x.rob_num))
      buff.write(self.rob_cam_pos_x.tostring())
      buff.write(self.rob_cam_pos_y.tostring())
      buff.write(self.rob_cam_vel_x.tostring())
      buff.write(self.rob_cam_vel_y.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.exist_rob_flag, _x.rob_num,) = _get_struct_Bi().unpack(str[start:end])
      self.exist_rob_flag = bool(self.exist_rob_flag)
      start = end
      end += 40
      self.rob_cam_pos_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=5)
      start = end
      end += 40
      self.rob_cam_pos_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=5)
      start = end
      end += 40
      self.rob_cam_vel_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=5)
      start = end
      end += 40
      self.rob_cam_vel_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=5)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
