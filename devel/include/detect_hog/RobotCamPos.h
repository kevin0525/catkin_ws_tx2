// Generated by gencpp from file detect_hog/RobotCamPos.msg
// DO NOT EDIT!


#ifndef DETECT_HOG_MESSAGE_ROBOTCAMPOS_H
#define DETECT_HOG_MESSAGE_ROBOTCAMPOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detect_hog
{
template <class ContainerAllocator>
struct RobotCamPos_
{
  typedef RobotCamPos_<ContainerAllocator> Type;

  RobotCamPos_()
    : exist_rob_flag(false)
    , rob_num(0)
    , rob_cam_pos_x()
    , rob_cam_pos_y()
    , rob_cam_vel_x()
    , rob_cam_vel_y()  {
      rob_cam_pos_x.assign(0.0);

      rob_cam_pos_y.assign(0.0);

      rob_cam_vel_x.assign(0.0);

      rob_cam_vel_y.assign(0.0);
  }
  RobotCamPos_(const ContainerAllocator& _alloc)
    : exist_rob_flag(false)
    , rob_num(0)
    , rob_cam_pos_x()
    , rob_cam_pos_y()
    , rob_cam_vel_x()
    , rob_cam_vel_y()  {
  (void)_alloc;
      rob_cam_pos_x.assign(0.0);

      rob_cam_pos_y.assign(0.0);

      rob_cam_vel_x.assign(0.0);

      rob_cam_vel_y.assign(0.0);
  }



   typedef uint8_t _exist_rob_flag_type;
  _exist_rob_flag_type exist_rob_flag;

   typedef int32_t _rob_num_type;
  _rob_num_type rob_num;

   typedef boost::array<double, 5>  _rob_cam_pos_x_type;
  _rob_cam_pos_x_type rob_cam_pos_x;

   typedef boost::array<double, 5>  _rob_cam_pos_y_type;
  _rob_cam_pos_y_type rob_cam_pos_y;

   typedef boost::array<double, 5>  _rob_cam_vel_x_type;
  _rob_cam_vel_x_type rob_cam_vel_x;

   typedef boost::array<double, 5>  _rob_cam_vel_y_type;
  _rob_cam_vel_y_type rob_cam_vel_y;




  typedef boost::shared_ptr< ::detect_hog::RobotCamPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detect_hog::RobotCamPos_<ContainerAllocator> const> ConstPtr;

}; // struct RobotCamPos_

typedef ::detect_hog::RobotCamPos_<std::allocator<void> > RobotCamPos;

typedef boost::shared_ptr< ::detect_hog::RobotCamPos > RobotCamPosPtr;
typedef boost::shared_ptr< ::detect_hog::RobotCamPos const> RobotCamPosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detect_hog::RobotCamPos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detect_hog::RobotCamPos_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace detect_hog

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'detect_hog': ['/home/nvidia/catkin_tx2/src/detect_hog/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::detect_hog::RobotCamPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detect_hog::RobotCamPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect_hog::RobotCamPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect_hog::RobotCamPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_hog::RobotCamPos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_hog::RobotCamPos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detect_hog::RobotCamPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6d1df053b1518d33523e7d629bdecc1";
  }

  static const char* value(const ::detect_hog::RobotCamPos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6d1df053b1518d3ULL;
  static const uint64_t static_value2 = 0x3523e7d629bdecc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::detect_hog::RobotCamPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detect_hog/RobotCamPos";
  }

  static const char* value(const ::detect_hog::RobotCamPos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detect_hog::RobotCamPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool exist_rob_flag\n\
int32 rob_num\n\
float64[5] rob_cam_pos_x\n\
float64[5] rob_cam_pos_y\n\
float64[5] rob_cam_vel_x\n\
float64[5] rob_cam_vel_y\n\
\n\
";
  }

  static const char* value(const ::detect_hog::RobotCamPos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detect_hog::RobotCamPos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.exist_rob_flag);
      stream.next(m.rob_num);
      stream.next(m.rob_cam_pos_x);
      stream.next(m.rob_cam_pos_y);
      stream.next(m.rob_cam_vel_x);
      stream.next(m.rob_cam_vel_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotCamPos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detect_hog::RobotCamPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detect_hog::RobotCamPos_<ContainerAllocator>& v)
  {
    s << indent << "exist_rob_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exist_rob_flag);
    s << indent << "rob_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rob_num);
    s << indent << "rob_cam_pos_x[]" << std::endl;
    for (size_t i = 0; i < v.rob_cam_pos_x.size(); ++i)
    {
      s << indent << "  rob_cam_pos_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rob_cam_pos_x[i]);
    }
    s << indent << "rob_cam_pos_y[]" << std::endl;
    for (size_t i = 0; i < v.rob_cam_pos_y.size(); ++i)
    {
      s << indent << "  rob_cam_pos_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rob_cam_pos_y[i]);
    }
    s << indent << "rob_cam_vel_x[]" << std::endl;
    for (size_t i = 0; i < v.rob_cam_vel_x.size(); ++i)
    {
      s << indent << "  rob_cam_vel_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rob_cam_vel_x[i]);
    }
    s << indent << "rob_cam_vel_y[]" << std::endl;
    for (size_t i = 0; i < v.rob_cam_vel_y.size(); ++i)
    {
      s << indent << "  rob_cam_vel_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rob_cam_vel_y[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECT_HOG_MESSAGE_ROBOTCAMPOS_H
